pca <- plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=colorsVector,
colorbar=list(
title='Colorbar'
),
colorscale=viridis,
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
pca
pca <- plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=colorsVector,
colorbar=list(
title='Colorbar'
),
colorscale="viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
pca
pca <- plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=colorsVector,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
pca
dataSet
dataSet[,rownames(dataSet) == '0C_336h_air_d_b2']
dataSet[rownames(dataSet) == '0C_336h_air_d_b2',]
dataSet[rownames(dataSet) == '5C_168h_air_a_b2',]
pca <- plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
pca
?prcomp
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
?pdf
?par
library(BeefQualityAssessment)
?write.csv
?write.csv2
write.csv(dataSet, file = "ozlem.csv")
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
aSC <- aPCAMODEL$x
aSC <- as.data.frame(aSC)
aLD <- aPCAMODEL$rotation
aEV <- aPCAMODEL$sdev^2
?PDF
_pdf
?pdf
?par
outputFile = paste0(outputDir, "/" , platform, "_PCA.pdf")
outputDir<-getwd()
outputDir
outputFile = paste0(outputDir, "/" , platform, "_PCA.pdf")
outputFile
pdf(outputFile)
####x11()
par(cex.main=1)
plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
dev.off()
pdf(outputFile)
####x11()
par(cex.main=1)
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(aSC[,1], aSC[,2], col=colorsVector, xlab="PC1", ylab="PC2", main="PCA score plot", type ="p")
#shape::colorlegend(colors, c(seq(as.integer(minTVC), as.integer(maxTVC),1)), align="l", vertical=TRUE)
shape::colorlegend(posx = c(0.8, 0.83), col = colorsVector,
zlim = c(minTVC, maxTVC), digit = 1)
dev.off()
export(plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
, "plot.pdf")
export(plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
, outputFile)
outputFile = paste0(outputDir, "/" , platform, "_PCA__.pdf")
pdf(outputFile)
outputFile = paste0(outputDir, "/" , platform, "_PCA__.pdf")
export(plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
, outputFile)
orca(plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
, outputFile)
p<-plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
Pdf <- plotly_IMAGE(p, format = "pdf", out_file = "plotly-test-image.pdf")
?export
library(orca)
install.packages("orca")
library(orca)
orca(p = last_plot(), file = "plotly.pdf")
export(p = last_plot(), file = "plotly.pdf")
webshot::install_phantomjs()
export(p = last_plot(), file = "plotly.pdf")
p<-plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
p
export(p = p, file = "plotly2.pdf")
p<-plot(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
?ggplot
p<- ggplot(data, aes(PC1, PC2, color=dataSet$TVC, shape=name)) +
geom_point(size=11) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC1 (%1.0f%%)", variance[1]))
library(ggplot2)
p<- ggplot(data, aes(PC1, PC2, color=dataSet$TVC, shape=name)) +
geom_point(size=11) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC1 (%1.0f%%)", variance[1]))
p<- ggplot(aSC, aes(PC1, PC2, color=dataSet$TVC, shape=name)) +
geom_point(size=11) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC1 (%1.0f%%)", variance[1]))
p
p<- ggplot(aSC, aes(PC1, PC2, color=dataSet$TVC)) +
geom_point(size=11) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC1 (%1.0f%%)", variance[1]))
ylab(sprintf("PC1 (%1.0f%%)", variance[1]))
p
p<- ggplot(aSC, aes(PC1, PC2, color=dataSet$TVC)) +
geom_point(size=11) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC1 (%1.0f%%)", variance[1]))
p
autoplot(aPCAMODEL, loadings = TRUE, loadings.label = TRUE,
data = dataSet, colour = 'dataSet$TVC')
autoplot(aPCAMODEL, loadings = TRUE, loadings.label = TRUE,
data = dataSet, colour = dataSet$TVC)
p<-autoplot(aPCAMODEL, loadings = TRUE, loadings.label = TRUE,
data = dataSet, colour = dataSet$TVC)
p
p<-autoplot(aPCAMODEL, loadings = TRUE, loadings.label = TRUE,
data = dataSet, colour = dataSet$TVC)
p
dev.off()
p<-autoplot(aPCAMODEL, loadings = TRUE, loadings.label = TRUE,
data = dataSet, colour = dataSet$TVC)
p
p<-autoplot(aPCAMODEL, loadings = TRUE, loadings.label = FALSE,
data = dataSet, colour = dataSet$TVC)
p
p<-autoplot(aPCAMODEL, loadings = FALSE, loadings.label = FALSE,
data = dataSet, colour = dataSet$TVC)
p
?autoplot
p<-autoplot(aPCAMODEL, loadings = FALSE, loadings.label = FALSE,
data = dataSet, colour = dataSet$TVC)
p
p<-plot(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
p<-plot_ly(aSC ,type = "scatter",x = ~PC1, y = ~PC2, text=rownames(aSC),
mode="markers",
marker=list(                size=11,
color=dataSet$TVC,
colorbar=list(
title='Colorbar'
),
colorscale="Viridis",
reversescale =T)
)%>%
layout(title= paste0("PCA with ", platform,  " dataset coloured by TVC"),
xaxis=list(title=sprintf("PC1 (%1.0f%%)", variance[1])),
yaxis=list(title=sprintf("PC2 (%1.0f%%)", variance[2])))
P
p
?ggplot
p<-autoplot(aPCAMODEL, loadings = FALSE, loadings.label = FALSE,
data = dataSet, colour = dataSet$TVC)
+scale_colour_brewer(palette = "Dark2")
p<-autoplot(aPCAMODEL, loadings = FALSE, loadings.label = FALSE,
data = dataSet, colour = dataSet$TVC) +scale_colour_brewer(palette = "Dark2")
p
p<-autoplot(aPCAMODEL, loadings = FALSE, loadings.label = FALSE,
data = dataSet, colour = dataSet$TVC) +scale_colour_brewer(palette = "Viridis")
p
aSC
ggplot(aSC,
aes(x=~PC1, y = ~PC2, color=dataSet$TVC)) +
geom_point(size=6)
ggplot(aSC,
aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6)
ggplot(aSC, aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6) +
+scale_colour_brewer(palette = "Viridis")
ggplot(aSC, aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6) +
+scale_colour_brewer(palette = "viridis")
ggplot(aSC, aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6) +
+scale_colour_brewer(palette = viridis)
ggplot(aSC, aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6) +
+scale_color_viridis(discrete = TRUE)
ggplot(aSC, aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6)
ggplot(aSC, aes(x=PC1, y = PC2, color=dataSet$TVC)) +
geom_point(size=6)
p <- ggplot(aSC, aes(PC1, PC2))
p + geom_point(size = 4, aes(colour = dataSet$TVC)) +
scale_color_viridis(discrete = TRUE) +
theme_bw()
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = dataSet$TVC)) +
scale_color_viridis(discrete = FALSE) +
theme_bw()
P
p
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = dataSet$TVC TVC)) +
scale_color_viridis(discrete = FALSE) +
theme_bw()
ggplot()
?ggplot
?scale_color_viridis
?aes
TVC<-dataSet$TVC
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
scale_color_viridis(order=-1) +
theme_bw()
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
scale_color_viridis()+
theme_bw()
P
p
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1]))i
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])),
ylab(sprintf("PC2 (%1.0f%%)", variance[2]))
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])),
ylab(sprintf("PC2 (%1.0f%%)", variance[2])),
scale_color_viridis()+
theme_bw()
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
scale_color_viridis()+
theme_bw()
p
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
ggtitle(paste0("PCA with ", platform,  " dataset coloured by TVC"))
p
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
ggtitle(paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
p
?ggtitle
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
p
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
scale_size_area() +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
p
p1 <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
p1
p
p1
p
outputFile = paste0(outputDir, "/" , platform, "_PCA__.pdf")
pdf(outputFile)
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
dev.off()
outputFile = paste0(outputDir, "/" , platform, "ozlem_PCA__.pdf")
pdf(outputFile)
####x11()
par(cex.main=1)
p <- ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
dev.off()
outputFile = paste0(outputDir, "/" , platform, "ozlem_PCA__.pdf")
pdf(outputFile)
####x11()
par(cex.main=1)
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
dev.off()
outputFile = paste0(outputDir, "/" , platform, "ozlem2_PCA__.pdf")
pdf(outputFile)
####x11()
par(cex.main=1)
ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
dev.off()
outputFile = paste0(outputDir, "/" , platform, "ozlem3_PCA__.pdf")
pdf(outputFile)
ggplot(aSC, aes(PC1, PC2))+
geom_point(size = 4, aes(colour = TVC)) +
xlab(sprintf("PC1 (%1.0f%%)", variance[1])) +
ylab(sprintf("PC2 (%1.0f%%)", variance[2])) +
labs(title=paste0("PCA with ", platform,  " dataset coloured by TVC"))+
scale_color_viridis()+
theme_bw()
dev.off()
?prcomp
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
library(BeefQualityAssessment)
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
roxygen2::roxygenise()
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
library(BeefQualityAssessment)
assess.quality("/Users/ozlemkaradeniz/Cranfield/BeefQualityAssessment/input/config.json")
dataFileName <- "/Users/ozlemkaradeniz/Cranfield/Thesis/data/MSI_beef_air_spoilage_GM_OK.xlsx"
dataSet <- openxlsx::read.xlsx(dataFileName, sheet = 1, startRow = 1, rowNames=TRUE)
sam <- row.names(dataSet)
varb <- colnames(dataSet)
X <- as.matrix(dataSet)
cat("\nAuto-scaled\n===========\n")
aPCAMODEL <- prcomp(dataSet, scale. = TRUE)
aSC <- aPCAMODEL$x
aSC <- as.data.frame(aSC)
aLD <- aPCAMODEL$rotation
aEV <- aPCAMODEL$sdev^2
aSC
aLD
aPCAMODEL
?prcomp
aSC
?Boruta
library(Boruta)
?Boruta
