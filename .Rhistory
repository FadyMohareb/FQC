setwd("~/Cranfield/BeefQualityAssessment")
number_of_iterations<-1
scaling <- "auto-scale"
assess.quality("MSI,ENOSE,FTIR,freshdetect,MSIF", "SVM-Radial,SVM-Polynomial,KNN,RFR,PLSR,PCR,RT,OLSR,SLR,RR,LR,ER,XGBoost",
"MSI_beef_air_spoilage_GM_OK.xlsx,enose_beef_air_spoilage_GM_OK.xlsx,FTIR_beef_air_spoilage_GM_ok.xlsx,freshdetect_beef_air_spoilage_GM_ok.xlsx,MSIF_beef_air_spoilage_GM_ok.csv",
number_of_iterations, scaling)
require(BeefQualityAssessment)
number_of_iterations<-1
scaling <- "auto-scale"
assess.quality("MSI,ENOSE,FTIR,freshdetect,MSIF", "SVM-Radial,SVM-Polynomial,KNN,RFR,PLSR,PCR,RT,OLSR,SLR,RR,LR,ER,XGBoost",
"MSI_beef_air_spoilage_GM_OK.xlsx,enose_beef_air_spoilage_GM_OK.xlsx,FTIR_beef_air_spoilage_GM_ok.xlsx,freshdetect_beef_air_spoilage_GM_ok.xlsx,MSIF_beef_air_spoilage_GM_ok.csv",
number_of_iterations, scaling)
roxygen2::roxygenise()
library(BeefQualityAssessment)
number_of_iterations<-10
scaling <- "auto-scale"
assess.quality("MSI,ENOSE,FTIR,freshdetect,MSIF", "SVM-Radial,SVM-Polynomial,KNN,RFR,PLSR,PCR,RT,OLSR,SLR,RR,LR,ER,XGBoost",
"MSI_beef_air_spoilage_GM_OK.xlsx,enose_beef_air_spoilage_GM_OK.xlsx,FTIR_beef_air_spoilage_GM_ok.xlsx,freshdetect_beef_air_spoilage_GM_ok.xlsx,MSIF_beef_air_spoilage_GM_ok.csv",
number_of_iterations, scaling)
data.file <- "/Users/ozlemkaradeniz/Cranfield/Thesis/data/MSI_beef_air_spoilage_GM_OK.xlsx"
dataAll <- openxlsx::read.xlsx(data.file, sheet = 1, startRow = 1, rowNames=TRUE)
regressionParameterList <- list("numberOfIterations" = 10, "pretreatment" = c("center", "scale"),
"percentageForTrainingSet" = 0.7, kernel="radial",dataSet= dataAll)
library(foreach)
library(e1071)
library(caret)
dataSet<-regressionParameterList$dataSet
set.seed(1821)
trainIndexList <- createDataPartition(dataSet$TVC, p = regressionParameterList$percentageForTrainingSet,
list = FALSE, times = regressionParameterList$numberOfIterations)
bestHyperParamsList<-c()
svmModelList <- vector(mode="list", length = regressionParameterList$numberOfIterations)
RMSEList <- vector(mode="list", length = regressionParameterList$numberOfIterations)
RSquareList <- vector(mode="list", length = regressionParameterList$numberOfIterations)
svmModelList <- foreach(i=seq(1:regressionParameterList$numberOfIterations), .inorder=FALSE) %dopar% {
trainSet <- dataSet[trainIndexList[,i],]
testSet <- dataSet[-trainIndexList[,i],]
tuningResult <- e1071::tune(svm, trainSet, trainSet$TVC,
ranges = list(cost = defCostRange, gamma = defGammaRange, epsilon = defEpsilonRange),
tunecontrol = tune.control(sampling = "fix")
)
bestHyperParams <- list("cost" = tuningResult$best.parameters["cost"][1,1],
"gamma" = tuningResult$best.parameters["gamma"][1,1],
"epsilon" = tuningResult$best.parameters["epsilon"][1,1])
bestHyperParamsList <- c(bestHyperParamsList, bestHyperParams)
#svm model
modelFit <- svm(trainSet, trainSet$TVC, type="eps-regression",
kernel=regressionParameterList$kernel, cost=bestHyperParams$cost, gamma =bestHyperParams$gamma,
epsilon =bestHyperParams$epsilon)
svmModelList[[i]] <- modelFit
predictedValues <- predict(modelFit , testSet)
RMSEList[[i]] <- RMSE(testSet$TVC, predictedValues)
RSquareList[[i]] <- RSQUARE(testSet$TVC, predictedValues)
}
# default machine learning parametedef.proportion<-0.7
defCostRange<-c(seq(1, 20, 3), seq(30, 110, 20))
defGammaRange<-c(seq(0, 0.06, 0.02), seq(0.1, 0.3, 0.1), 0.6)
defEpsilonRange<-c(seq(0,0.1,0.03), 0.2, seq(0.3,0.9,0.3))
svmModelList <- foreach(i=seq(1:regressionParameterList$numberOfIterations), .inorder=FALSE) %dopar% {
trainSet <- dataSet[trainIndexList[,i],]
testSet <- dataSet[-trainIndexList[,i],]
tuningResult <- e1071::tune(svm, trainSet, trainSet$TVC,
ranges = list(cost = defCostRange, gamma = defGammaRange, epsilon = defEpsilonRange),
tunecontrol = tune.control(sampling = "fix")
)
bestHyperParams <- list("cost" = tuningResult$best.parameters["cost"][1,1],
"gamma" = tuningResult$best.parameters["gamma"][1,1],
"epsilon" = tuningResult$best.parameters["epsilon"][1,1])
bestHyperParamsList <- c(bestHyperParamsList, bestHyperParams)
#svm model
modelFit <- svm(trainSet, trainSet$TVC, type="eps-regression",
kernel=regressionParameterList$kernel, cost=bestHyperParams$cost, gamma =bestHyperParams$gamma,
epsilon =bestHyperParams$epsilon)
svmModelList[[i]] <- modelFit
predictedValues <- predict(modelFit , testSet)
RMSEList[[i]] <- RMSE(testSet$TVC, predictedValues)
RSquareList[[i]] <- RSQUARE(testSet$TVC, predictedValues)
}
=rep(250, 4)
rep(250, 4)
RMSE <- function(true, predicted){
RMSE <- sqrt(mean((predicted - true)^2))
return(RMSE)
}
RSQUARE <- function(true, predicted){
RSquare <- 1 - sum((predicted - true)^2) / sum((true - mean(true))^2)
return(RSquare)
}
svmModelList <- foreach(i=seq(1:regressionParameterList$numberOfIterations), .inorder=FALSE) %dopar% {
trainSet <- dataSet[trainIndexList[,i],]
testSet <- dataSet[-trainIndexList[,i],]
tuningResult <- e1071::tune(svm, trainSet, trainSet$TVC,
ranges = list(cost = defCostRange, gamma = defGammaRange, epsilon = defEpsilonRange),
tunecontrol = tune.control(sampling = "fix")
)
bestHyperParams <- list("cost" = tuningResult$best.parameters["cost"][1,1],
"gamma" = tuningResult$best.parameters["gamma"][1,1],
"epsilon" = tuningResult$best.parameters["epsilon"][1,1])
bestHyperParamsList <- c(bestHyperParamsList, bestHyperParams)
#svm model
modelFit <- svm(trainSet, trainSet$TVC, type="eps-regression",
kernel=regressionParameterList$kernel, cost=bestHyperParams$cost, gamma =bestHyperParams$gamma,
epsilon =bestHyperParams$epsilon)
svmModelList[[i]] <- modelFit
predictedValues <- predict(modelFit , testSet)
RMSEList[[i]] <- RMSE(testSet$TVC, predictedValues)
RSquareList[[i]] <- RSQUARE(testSet$TVC, predictedValues)
}
RSquareList
svmModelList
RSquareList
RMSEList
svmModelList <- foreach(i=seq(1:regressionParameterList$numberOfIterations), .inorder=FALSE) %dopar% {
trainSet <- dataSet[trainIndexList[,i],]
testSet <- dataSet[-trainIndexList[,i],]
tuningResult <- e1071::tune(svm, trainSet, trainSet$TVC,
ranges = list(cost = defCostRange, gamma = defGammaRange, epsilon = defEpsilonRange),
tunecontrol = tune.control(sampling = "fix")
)
bestHyperParams <- list("cost" = tuningResult$best.parameters["cost"][1,1],
"gamma" = tuningResult$best.parameters["gamma"][1,1],
"epsilon" = tuningResult$best.parameters["epsilon"][1,1])
bestHyperParamsList <- c(bestHyperParamsList, bestHyperParams)
#svm model
modelFit <- svm(trainSet, trainSet$TVC, type="eps-regression",
kernel=regressionParameterList$kernel, cost=bestHyperParams$cost, gamma =bestHyperParams$gamma,
epsilon =bestHyperParams$epsilon)
predictedValues <- predict(modelFit , testSet)
RMSE<- RMSE(testSet$TVC, predictedValues)
RSquare <- RSQUARE(testSet$TVC, predictedValues)
svmModelList[[i]] <- list("model" = modelFit, "RMSE" = RMSE, "RSquare" = RSquare)
}
svmModelList
movies_lower <-lapply(svmModelList, $RMSE)
movies_lower <-lapply(svmModelList, svmModelList$RMSE)
unlist(svmModelList)
svmModelList
movies_lower <-lapply(svmModelList, unlist)
movies_lower
svmModelList[[1]]
svmModelList[[1]]
svmModelList[[1]][1]
svmModelList[[1]][3]
movies_lower <-lapply(svmModelList, .[3] )
movies_lower <-lapply(svmModelList, [3] )
lapply(svmModelList, function(x) X$RMSE)
lapply(svmModelList, function(x) x$RMSE)
unlist(lapply(svmModelList, function(x) X$RMSE))
unlist(lapply(svmModelList, function(x) x$RMSE))
library(BeefQualityAssessment)
number_of_iterations<-10
pretreatment <- "auto-scale"
percentage_for_training_set<-0.7
assess.quality("MSI,ENOSE,FTIR,freshdetect,MSIF", "SVM-Radial",
"MSI_beef_air_spoilage_GM_OK.xlsx,enose_beef_air_spoilage_GM_OK.xlsx,FTIR_beef_air_spoilage_GM_ok.xlsx,freshdetect_beef_air_spoilage_GM_ok.xlsx,MSIF_beef_air_spoilage_GM_ok.csv",
number_of_iterations, pretreatment, percentage_for_training_set)
